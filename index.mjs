function run(fn) {
    return fn();
}
function blank_object() {
    return Object.create(null);
}
function run_all(fns) {
    fns.forEach(run);
}

let current_component;
function set_current_component(component) {
    current_component = component;
}
const escaped = {
    '"': '&quot;',
    "'": '&#39;',
    '&': '&amp;',
    '<': '&lt;',
    '>': '&gt;'
};
function escape(html) {
    return String(html).replace(/["'&<>]/g, match => escaped[match]);
}
let on_destroy;
function create_ssr_component(fn) {
    function $$render(result, props, bindings, slots) {
        const parent_component = current_component;
        const $$ = {
            on_destroy,
            context: new Map(parent_component ? parent_component.$$.context : []),
            // these will be immediately discarded
            on_mount: [],
            before_update: [],
            after_update: [],
            callbacks: blank_object()
        };
        set_current_component({ $$ });
        const html = fn(result, props, bindings, slots);
        set_current_component(parent_component);
        return html;
    }
    return {
        render: (props = {}, options = {}) => {
            on_destroy = [];
            const result = { title: '', head: '', css: new Set() };
            const html = $$render(result, props, {}, options);
            run_all(on_destroy);
            return {
                html,
                css: {
                    code: Array.from(result.css).map(css => css.code).join('\n'),
                    map: null // TODO
                },
                head: result.title + result.head
            };
        },
        $$render
    };
}
function add_attribute(name, value, boolean) {
    if (value == null || (boolean && !value))
        return '';
    return ` ${name}${value === true ? '' : `=${typeof value === 'string' ? JSON.stringify(escape(value)) : `"${value}"`}`}`;
}

let libClassName = 'svelte-auto-complete';

const setConfiguration = obj => {
};

const DIRECTION = {
    BOTTOM: 'BOTTOM',
    LEFT: 'LEFT',
    RIGHT: 'RIGHT',
    TOP: 'TOP'
};

/* src\AutoComplete.svelte generated by Svelte v3.21.0 */

const AutoComplete = create_ssr_component(($$result, $$props, $$bindings, $$slots) => {
	let { direction = [DIRECTION.LEFT, DIRECTION.BOTTOM] } = $$props;
	let { getOptionText = o => o } = $$props;
	let { getOptionValue = o => o } = $$props;
	let { matchingFunction = (value, optionValue) => optionValue.toLowerCase().startsWith(value.toLowerCase()) } = $$props;
	let { options } = $$props;
	let { value = "" } = $$props;
	let input;

	if ($$props.direction === void 0 && $$bindings.direction && direction !== void 0) $$bindings.direction(direction);
	if ($$props.getOptionText === void 0 && $$bindings.getOptionText && getOptionText !== void 0) $$bindings.getOptionText(getOptionText);
	if ($$props.getOptionValue === void 0 && $$bindings.getOptionValue && getOptionValue !== void 0) $$bindings.getOptionValue(getOptionValue);
	if ($$props.matchingFunction === void 0 && $$bindings.matchingFunction && matchingFunction !== void 0) $$bindings.matchingFunction(matchingFunction);
	if ($$props.options === void 0 && $$bindings.options && options !== void 0) $$bindings.options(options);
	if ($$props.value === void 0 && $$bindings.value && value !== void 0) $$bindings.value(value);
	let $$settled;
	let $$rendered;

	do {
		$$settled = true;

		$$rendered = `<input${add_attribute("class", libClassName, 0)} type="${"text"}"${add_attribute("this", input, 1)}${add_attribute("value", value, 1)}>

${ ``}`;
	} while (!$$settled);

	return $$rendered;
});

export { AutoComplete, DIRECTION, setConfiguration };
